"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lodash_1 = require('lodash');
var multiLineCommentStart = '/** ';
var multiLineCommentIndent = ' *  ';
var multiLineCommentEnd = ' */';
var newLineRegex = /\\n|\n/;
var TsType;
(function (TsType) {
    TsType.DEFAULT_SETTINGS = {
        declarationDescription: true,
        // declareProperties: false,
        declareReferenced: true,
        declareSimpleType: false,
        endPropertyWithSemicolon: true,
        endTypeWithSemicolon: true,
        propertyDescription: true,
        useConstEnums: true,
        useFullReferencePathAsName: false,
        useInterfaceDeclaration: true
    };
    var TsTypeBase = (function () {
        function TsTypeBase() {
        }
        TsTypeBase.prototype.safeId = function () {
            return this.id && lodash_1.upperFirst(lodash_1.camelCase(this.id));
        };
        TsTypeBase.prototype.toBlockComment = function (settings) {
            return this.description && settings.declarationDescription ?
                "" + (this.description
                    .split(newLineRegex)
                    .map(function (line, lineNum) { return (lineNum > 0 ? multiLineCommentIndent : multiLineCommentStart) + line; })
                    .join('\n') + multiLineCommentEnd + '\n') :
                '';
        };
        TsTypeBase.prototype._toDeclaration = function (decl, settings) {
            return this.toBlockComment(settings) + decl + (settings.endTypeWithSemicolon ? ';' : '');
        };
        TsTypeBase.prototype.isSimpleType = function () { return true; };
        TsTypeBase.prototype.toDeclaration = function (settings) {
            return this._toDeclaration("export type " + this.safeId() + " = " + this._type(settings), settings);
        };
        TsTypeBase.prototype.toSafeType = function (settings) {
            return this.toType(settings);
        };
        TsTypeBase.prototype.toType = function (settings) {
            return this.safeId() || this._type(settings);
        };
        TsTypeBase.prototype.toString = function () {
            return this._type(TsType.DEFAULT_SETTINGS);
        };
        return TsTypeBase;
    }());
    TsType.TsTypeBase = TsTypeBase;
    var Any = (function (_super) {
        __extends(Any, _super);
        function Any() {
            _super.apply(this, arguments);
        }
        Any.prototype._type = function () {
            return 'any';
        };
        return Any;
    }(TsTypeBase));
    TsType.Any = Any;
    var String = (function (_super) {
        __extends(String, _super);
        function String() {
            _super.apply(this, arguments);
        }
        String.prototype._type = function () {
            return 'string';
        };
        return String;
    }(TsTypeBase));
    TsType.String = String;
    var Boolean = (function (_super) {
        __extends(Boolean, _super);
        function Boolean() {
            _super.apply(this, arguments);
        }
        Boolean.prototype._type = function () {
            return 'boolean';
        };
        return Boolean;
    }(TsTypeBase));
    TsType.Boolean = Boolean;
    var Number = (function (_super) {
        __extends(Number, _super);
        function Number() {
            _super.apply(this, arguments);
        }
        Number.prototype._type = function () {
            return 'number';
        };
        return Number;
    }(TsTypeBase));
    TsType.Number = Number;
    var Object = (function (_super) {
        __extends(Object, _super);
        function Object() {
            _super.apply(this, arguments);
        }
        Object.prototype._type = function () {
            return 'Object';
        };
        return Object;
    }(TsTypeBase));
    TsType.Object = Object;
    var Void = (function (_super) {
        __extends(Void, _super);
        function Void() {
            _super.apply(this, arguments);
        }
        Void.prototype._type = function () {
            return 'void';
        };
        return Void;
    }(TsTypeBase));
    TsType.Void = Void;
    var Literal = (function (_super) {
        __extends(Literal, _super);
        function Literal(value) {
            _super.call(this);
            this.value = value;
        }
        Literal.prototype._type = function () {
            return this.value;
        };
        return Literal;
    }(TsTypeBase));
    TsType.Literal = Literal;
    var EnumValue = (function () {
        function EnumValue(enumValues) {
            this.identifier = enumValues[0];
            this.value = enumValues[1];
        }
        EnumValue.prototype.toDeclaration = function () {
            // if there is a value associated with the identifier, declare as identifier=value
            // else declare as identifier
            return "" + this.identifier + (this.value ? ('=' + this.value) : '');
        };
        EnumValue.prototype.toString = function () {
            return "Enum" + this.identifier;
        };
        return EnumValue;
    }());
    TsType.EnumValue = EnumValue;
    var Enum = (function (_super) {
        __extends(Enum, _super);
        function Enum(enumValues) {
            _super.call(this);
            this.enumValues = enumValues;
        }
        Enum.prototype.isSimpleType = function () { return false; };
        Enum.prototype._type = function (settings) {
            return this.safeId() || 'SomeEnumType';
        };
        Enum.prototype.toSafeType = function (settings) {
            return "" + this.toType(settings);
        };
        Enum.prototype.toDeclaration = function (settings) {
            return this.toBlockComment(settings) + "export " + (settings.useConstEnums ? 'const ' : '') + "enum " + this._type(settings) + "{\n        " + this.enumValues.map(function (_) { return _.toDeclaration(); }).join(',\n') + "\n      }";
        };
        return Enum;
    }(TsTypeBase));
    TsType.Enum = Enum;
    var Array = (function (_super) {
        __extends(Array, _super);
        function Array(type) {
            _super.call(this);
            this.type = type;
        }
        Array.prototype._type = function (settings) {
            return (this.type || new Any()).toSafeType(settings) + "[]";
        };
        return Array;
    }(TsTypeBase));
    TsType.Array = Array;
    var Intersection = (function (_super) {
        __extends(Intersection, _super);
        function Intersection(data) {
            _super.call(this);
            this.data = data;
        }
        Intersection.prototype.isSimpleType = function () { return this.data.filter(function (_) { return !(_ instanceof Void); }).length <= 1; };
        Intersection.prototype._type = function (settings) {
            return this.data
                .filter(function (_) { return !(_ instanceof Void); })
                .map(function (_) { return _.toSafeType(settings); })
                .join('&');
        };
        Intersection.prototype.toSafeType = function (settings) {
            return "" + this.toType(settings);
        };
        return Intersection;
    }(TsTypeBase));
    TsType.Intersection = Intersection;
    var Union = (function (_super) {
        __extends(Union, _super);
        function Union() {
            _super.apply(this, arguments);
        }
        Union.prototype.isSimpleType = function () { return this.data.length <= 1; };
        Union.prototype._type = function (settings) {
            return this.data
                .map(function (_) { return _.toSafeType(settings); })
                .join('|');
        };
        return Union;
    }(Intersection));
    TsType.Union = Union;
    var Interface = (function (_super) {
        __extends(Interface, _super);
        function Interface(props) {
            _super.call(this);
            this.props = props;
        }
        Interface.reference = function (id) {
            var ret = new Interface([]);
            ret.id = id;
            return ret;
        };
        Interface.prototype._type = function (settings, declaration) {
            if (declaration === void 0) { declaration = false; }
            var id = this.safeId();
            return declaration || !id ? "{\n        " + this.props.map(function (_) {
                var indentString = '    ';
                var decl = indentString + _.name;
                if (!_.required)
                    decl += '?';
                decl += ': ' + _.type.toType(settings);
                if (settings.endPropertyWithSemicolon)
                    decl += ';';
                //All descriptions will be inside jsdoc-style comments to support hinting in editors
                //(ie intellisense)
                if (settings.propertyDescription && _.type.description && !_.type.id)
                    decl = _.type.description
                        .split(newLineRegex)
                        .map(function (line, lineNum, lines) { return (lineNum > 0 ? multiLineCommentIndent : indentString + multiLineCommentStart) + line; })
                        .join('\n' + indentString) + multiLineCommentEnd + '\n' + decl;
                return decl;
            }).join('\n') + "\n}" : id;
        };
        Interface.prototype.isSimpleType = function () { return false; };
        Interface.prototype.toDeclaration = function (settings) {
            if (settings.useInterfaceDeclaration)
                return this.toBlockComment(settings) + "export interface " + this.safeId() + " " + this._type(settings, true);
            return this._toDeclaration("export type " + this.safeId() + " = " + this._type(settings, true), settings);
        };
        return Interface;
    }(TsTypeBase));
    TsType.Interface = Interface;
})(TsType = exports.TsType || (exports.TsType = {}));
//# sourceMappingURL=TsTypes.js.map