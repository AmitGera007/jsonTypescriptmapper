"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var COMMENT_START = '/**';
var COMMENT_INDENT = ' * ';
var COMMENT_END = ' */';
var INDENT_STRING = '  ';
var TsType = (function () {
    function TsType(value) {
        this.value = value;
    }
    TsType.prototype.safeId = function () {
        return nameToTsSafeName(this.id);
    };
    TsType.prototype.toBlockComment = function () {
        return this.description && !this.isSimpleType()
            ? generateComment(this.description).join('\n') + "\n"
            : '';
    };
    TsType.prototype.isSimpleType = function () { return true; };
    TsType.prototype.toDeclaration = function (settings) {
        return this.toBlockComment()
            + ("export type " + this.safeId() + " = " + this.toString(settings))
            + (settings.endTypeWithSemicolon ? ';' : '');
    };
    TsType.prototype.toType = function (settings) {
        return this.safeId() || this.toString(settings);
    };
    return TsType;
}());
exports.TsType = TsType;
var TAny = (function (_super) {
    __extends(TAny, _super);
    function TAny() {
        return _super.call(this, undefined) || this;
    }
    TAny.prototype.toString = function () {
        return 'any';
    };
    return TAny;
}(TsType));
exports.TAny = TAny;
var TString = (function (_super) {
    __extends(TString, _super);
    function TString() {
        return _super.call(this, undefined) || this;
    }
    TString.prototype.toString = function () {
        return 'string';
    };
    return TString;
}(TsType));
exports.TString = TString;
var TBoolean = (function (_super) {
    __extends(TBoolean, _super);
    function TBoolean() {
        return _super.call(this, undefined) || this;
    }
    TBoolean.prototype.toString = function () {
        return 'boolean';
    };
    return TBoolean;
}(TsType));
exports.TBoolean = TBoolean;
var TNumber = (function (_super) {
    __extends(TNumber, _super);
    function TNumber() {
        return _super.call(this, undefined) || this;
    }
    TNumber.prototype.toString = function () {
        return 'number';
    };
    return TNumber;
}(TsType));
exports.TNumber = TNumber;
var TObject = (function (_super) {
    __extends(TObject, _super);
    function TObject() {
        return _super.call(this, undefined) || this;
    }
    TObject.prototype.toString = function () {
        return 'Object';
    };
    return TObject;
}(TsType));
exports.TObject = TObject;
var TNull = (function (_super) {
    __extends(TNull, _super);
    function TNull() {
        return _super.call(this, undefined) || this;
    }
    TNull.prototype.toString = function () {
        return 'null';
    };
    return TNull;
}(TsType));
exports.TNull = TNull;
var TLiteral = (function (_super) {
    __extends(TLiteral, _super);
    function TLiteral() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TLiteral.prototype.toString = function () {
        return JSON.stringify(this.value);
    };
    return TLiteral;
}(TsType));
exports.TLiteral = TLiteral;
var TReference = (function (_super) {
    __extends(TReference, _super);
    function TReference() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TReference.prototype.toString = function () { return this.value; };
    return TReference;
}(TsType));
exports.TReference = TReference;
var TEnumValue = (function (_super) {
    __extends(TEnumValue, _super);
    function TEnumValue(_a) {
        var identifier = _a[0], value = _a[1];
        var _this = _super.call(this, value) || this;
        _this.identifier = identifier;
        return _this;
    }
    TEnumValue.prototype.toDeclaration = function () {
        // if there is a value associated with the identifier, declare as identifier=value
        // else declare as identifier
        return "" + this.identifier + (this.value ? (' = ' + this.value) : '');
    };
    TEnumValue.prototype.toString = function () {
        return "Enum" + this.identifier;
    };
    return TEnumValue;
}(TsType));
exports.TEnumValue = TEnumValue;
var TEnum = (function (_super) {
    __extends(TEnum, _super);
    function TEnum(id, value) {
        var _this = _super.call(this, value) || this;
        _this.id = id;
        return _this;
    }
    TEnum.prototype.isSimpleType = function () { return false; };
    TEnum.prototype.toString = function (settings) {
        return this.safeId();
    };
    TEnum.prototype.toDeclaration = function (settings) {
        return this.toBlockComment()
            + ("export " + (settings.useConstEnums ? 'const ' : '') + "enum " + this.safeId() + " {")
            + '\n'
            + INDENT_STRING
            + this.value.map(function (_) { return _.toDeclaration(); }).join(",\n" + INDENT_STRING)
            + '\n'
            + '}';
    };
    return TEnum;
}(TsType));
exports.TEnum = TEnum;
var TArray = (function (_super) {
    __extends(TArray, _super);
    function TArray(value) {
        if (value === void 0) { value = new TAny; }
        return _super.call(this, value) || this;
    }
    TArray.prototype.toString = function (settings) {
        var type = this.value.toType(settings);
        return (type.indexOf('|') > -1 || type.indexOf('&') > -1 ? "(" + type + ")" : type) + "[]"; // hacky
    };
    return TArray;
}(TsType));
exports.TArray = TArray;
var TIntersection = (function (_super) {
    __extends(TIntersection, _super);
    function TIntersection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TIntersection.prototype.isSimpleType = function () { return this.value.length <= 1; };
    TIntersection.prototype.toString = function (settings) {
        return this.value
            .filter(function (_) { return !(_ instanceof TNull); })
            .map(function (_) { return _.toType(settings); })
            .join(' & ');
    };
    return TIntersection;
}(TsType));
exports.TIntersection = TIntersection;
var TUnion = (function (_super) {
    __extends(TUnion, _super);
    function TUnion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TUnion.prototype.isSimpleType = function () { return this.value.length <= 1; };
    TUnion.prototype.toString = function (settings) {
        return this.value
            .map(function (_) { return _.toType(settings); })
            .join(' | ');
    };
    return TUnion;
}(TsType));
exports.TUnion = TUnion;
var TInterface = (function (_super) {
    __extends(TInterface, _super);
    function TInterface() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TInterface.reference = function (id) {
        var ret = new TInterface([]);
        ret.id = id;
        return ret;
    };
    TInterface.prototype.toString = function (settings) {
        return "{\n"
            + (this.value.map(function (_) {
                return "" + INDENT_STRING + (_.type.description
                    ? generateComment(_.type.description).join("\n" + INDENT_STRING) + ("\n" + INDENT_STRING)
                    : '') + ('[k: string]' === _.name ? _.name : JSON.stringify(_.name)) + (_.required ? '' : '?') + ": " + _.type.toType(settings).replace(/\n/g, '\n' + INDENT_STRING) // ghetto nested indents
                 + (settings.endPropertyWithSemicolon ? ';' : '');
            }).join('\n') + "\n}");
    };
    TInterface.prototype.isSimpleType = function () { return false; };
    TInterface.prototype.toDeclaration = function (settings) {
        return this.toBlockComment() + "export interface " + this.safeId() + " " + this.toString(settings);
    };
    return TInterface;
}(TsType));
exports.TInterface = TInterface;
// eg.
//   foo -> Foo
//   fooBar -> FooBar
//   foo_1bar -> Foo_1bar
// TODO: more safety
// TODO: unit tests
function nameToTsSafeName(name) {
    return lodash_1.upperFirst(lodash_1.camelCase(name));
}
function generateComment(string) {
    return [
        COMMENT_START
    ].concat(string.split('\n').map(function (_) { return COMMENT_INDENT + _; }), [
        COMMENT_END
    ]);
}
//# sourceMappingURL=TsTypes.js.map