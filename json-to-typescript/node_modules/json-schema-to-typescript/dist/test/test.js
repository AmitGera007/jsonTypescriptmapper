"use strict";
const index_1 = require('../src/index');
const utils_1 = require('../src/utils');
const diff_1 = require('./diff');
const ava_1 = require('ava');
const cli_color_1 = require('cli-color');
const fs = require('fs');
const lodash_1 = require('lodash');
const path = require('path');
const dir = __dirname + '/cases';
const modules = fs.readdirSync(dir)
    .filter(_ => /^.*\.js$/.test(_))
    .map(_ => [_, require(path.join(dir, _))]);
// exporting `const only=true` will only run that test
// exporting `const exclude=true` will not run that test
const only = lodash_1.find(modules, _ => _[1].only);
if (only) {
    run(only[1], only[0]);
}
else {
    modules
        .filter(_ => !_[1].exclude)
        .forEach(_ => run(_[1], _[0]));
}
function run(exports, name) {
    if (isMultiTestCase(exports)) {
        exports.outputs.forEach(_ => {
            const caseName = `${name}: ${JSON.stringify(_.settings)}`;
            ava_1.default(caseName, t => {
                if (_.error) {
                    t.throws(() => index_1.compile(exports.input, utils_1.stripExtension(name), _.settings), _.error.type);
                }
                else {
                    compare(t, caseName, index_1.compile(exports.input, utils_1.stripExtension(name), _.settings), _.output);
                }
            });
        });
    }
    else {
        ava_1.default(name, t => exports.error
            ? t.throws(() => index_1.compile(exports.input, utils_1.stripExtension(name), exports.settings), exports.error.type)
            : compare(t, name, index_1.compile(exports.input, utils_1.stripExtension(name), exports.settings), exports.output));
    }
}
function isMultiTestCase(exports) {
    return 'outputs' in exports;
}
function compare(t, caseName, a, b) {
    if (a !== b) {
        console.log('\n', '─────────────────────────────────────────────────────────', '\n', cli_color_1.bold(cli_color_1.red(`${caseName} failed`)), '\n', '\n', cli_color_1.green('Green') + cli_color_1.white(' = Extraneous character in output'), '\n', '  ' + cli_color_1.red('Red') + cli_color_1.white(' = Missing character in output'), '\n', '\n', diff_1.diff(a, b), '─────────────────────────────────────────────────────────');
        t.fail();
    }
    else {
        t.pass();
    }
}
//# sourceMappingURL=test.js.map