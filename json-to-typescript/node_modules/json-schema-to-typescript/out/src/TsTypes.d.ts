export declare namespace TsType {
    interface TsTypeSettings {
        declarationDescription?: boolean;
        declareReferenced?: boolean;
        declareSimpleType?: boolean;
        endPropertyWithSemicolon?: boolean;
        endTypeWithSemicolon?: boolean;
        propertyDescription?: boolean;
        useConstEnums?: boolean;
        useFullReferencePathAsName?: boolean;
        useInterfaceDeclaration?: boolean;
    }
    var DEFAULT_SETTINGS: TsTypeSettings;
    abstract class TsTypeBase {
        id?: string;
        description?: string;
        protected safeId(): string | undefined;
        protected toBlockComment(settings: TsTypeSettings): string;
        protected _toDeclaration(decl: string, settings: TsTypeSettings): string;
        protected abstract _type(settings: TsTypeSettings): string;
        isSimpleType(): boolean;
        toDeclaration(settings: TsTypeSettings): string;
        toSafeType(settings: TsTypeSettings): string;
        toType(settings: TsTypeSettings): string;
        toString(): string;
    }
    interface TsProp {
        name: string;
        required: boolean;
        type: TsTypeBase;
    }
    class Any extends TsTypeBase {
        _type(): string;
    }
    class String extends TsTypeBase {
        _type(): string;
    }
    class Boolean extends TsTypeBase {
        _type(): string;
    }
    class Number extends TsTypeBase {
        _type(): string;
    }
    class Object extends TsTypeBase {
        _type(): string;
    }
    class Void extends TsTypeBase {
        _type(): string;
    }
    class Literal extends TsTypeBase {
        private value;
        constructor(value: any);
        _type(): any;
    }
    class EnumValue {
        identifier: string;
        value: string;
        constructor(enumValues: string[]);
        toDeclaration(): string;
        toString(): string;
    }
    class Enum extends TsTypeBase {
        enumValues: EnumValue[];
        constructor(enumValues: EnumValue[]);
        isSimpleType(): boolean;
        _type(settings: TsTypeSettings): string;
        toSafeType(settings: TsTypeSettings): string;
        toDeclaration(settings: TsTypeSettings): string;
    }
    class Array extends TsTypeBase {
        private type?;
        constructor(type?: TsTypeBase);
        _type(settings: TsTypeSettings): string;
    }
    class Intersection extends TsTypeBase {
        protected data: TsTypeBase[];
        constructor(data: TsTypeBase[]);
        isSimpleType(): boolean;
        _type(settings: TsTypeSettings): string;
        toSafeType(settings: TsTypeSettings): string;
    }
    class Union extends Intersection {
        isSimpleType(): boolean;
        _type(settings: TsTypeSettings): string;
    }
    class Interface extends TsTypeBase {
        private props;
        constructor(props: TsProp[]);
        static reference(id: string): Interface;
        protected _type(settings: TsTypeSettings, declaration?: boolean): string;
        isSimpleType(): boolean;
        toDeclaration(settings: TsTypeSettings): string;
    }
}
